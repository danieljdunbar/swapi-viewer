[{"/Users/danieldunbar/Documents/projects/swapi-viewer/src/index.tsx":"1","/Users/danieldunbar/Documents/projects/swapi-viewer/src/redux/Store.tsx":"2","/Users/danieldunbar/Documents/projects/swapi-viewer/src/redux/PersonSlice.tsx":"3","/Users/danieldunbar/Documents/projects/swapi-viewer/src/AppRouter.tsx":"4","/Users/danieldunbar/Documents/projects/swapi-viewer/src/person-profile/PersonProfile.tsx":"5","/Users/danieldunbar/Documents/projects/swapi-viewer/src/person-profile/films/ListFilms.tsx":"6","/Users/danieldunbar/Documents/projects/swapi-viewer/src/person-profile/films/FilmSummary.tsx":"7","/Users/danieldunbar/Documents/projects/swapi-viewer/src/common/common_interfaces.tsx":"8","/Users/danieldunbar/Documents/projects/swapi-viewer/src/list-people/ListPeople.tsx":"9","/Users/danieldunbar/Documents/projects/swapi-viewer/src/list-people/person-summary/PersonSummary.tsx":"10","/Users/danieldunbar/Documents/projects/swapi-viewer/src/main/App.tsx":"11"},{"size":566,"mtime":1608018251747,"results":"12","hashOfConfig":"13"},{"size":160,"mtime":1608004787982,"results":"14","hashOfConfig":"13"},{"size":527,"mtime":1608019740369,"results":"15","hashOfConfig":"13"},{"size":520,"mtime":1608019810189,"results":"16","hashOfConfig":"13"},{"size":4212,"mtime":1608019742066,"results":"17","hashOfConfig":"13"},{"size":722,"mtime":1608019974669,"results":"18","hashOfConfig":"13"},{"size":970,"mtime":1608019756549,"results":"19","hashOfConfig":"13"},{"size":1288,"mtime":1608019662263,"results":"20","hashOfConfig":"13"},{"size":1015,"mtime":1608027500511,"results":"21","hashOfConfig":"13"},{"size":1732,"mtime":1608019756549,"results":"22","hashOfConfig":"13"},{"size":2329,"mtime":1608027511173,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"p7ibal",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/danieldunbar/Documents/projects/swapi-viewer/src/index.tsx",[],["49","50"],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/redux/Store.tsx",[],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/redux/PersonSlice.tsx",[],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/AppRouter.tsx",[],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/person-profile/PersonProfile.tsx",["51"],"import React, { useEffect, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectPerson } from '../redux/PersonSlice';\nimport { Paper } from '@material-ui/core';\nimport { CircularProgress, IconButton } from '@material-ui/core';\nimport ArrowBack from '@material-ui/icons/ArrowBack';\nimport { Film } from '../common/common_interfaces';\nimport ListFilms from './films/ListFilms';\nimport { Link } from \"react-router-dom\";\nimport './PersonProfile.css';\n\ntype ActionType = 'addResult'|'addError';\n\ninterface PageAction {\n    type: ActionType;\n    film?: Film;\n    error?: Error;\n}\n\ninterface PageState {\n    errors: Error[];\n    isLoaded: boolean;\n    targetSize: number;\n    results: Film[];\n}\n\nfunction reducer(state: PageState, action: PageAction): PageState {\n    switch(action.type) {\n        case 'addResult':\n            if (action.film){\n\n                const updatedResults: Film[] = state.results.slice();\n                updatedResults.push(action.film);\n                const loaded = state.isLoaded || updatedResults.length === state.targetSize;\n                return {\n                    ...state,\n                    isLoaded: loaded,\n                    results: updatedResults,\n                }\n            }\n\n            break;\n        case 'addError':\n            if (action.error){\n                const updatedErrors: Error[] = state.errors.slice();\n                updatedErrors.push(action.error);\n                return {\n                    ...state,\n                    isLoaded: true,\n                    errors: updatedErrors,\n                }\n            }\n\n            break;\n    }\n\n\n    return state;\n}\n\nexport default function PersonProfile () {\n    const selectedPerson = useSelector(selectPerson);\n    const initialState = {errors: [], isLoaded: false, targetSize: selectedPerson.films.length, results: []};\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n        for (let filmUrl of selectedPerson.films) {\n            fetch(filmUrl)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        const response:Film = JSON.parse(JSON.stringify(result));\n                        dispatch({type: 'addResult', film: response});\n                    },\n                    // Note: it's important to handle errors here\n                    // instead of a catch() block so that we don't swallow\n                    // exceptions from actual bugs in components.\n                    (error) => {\n                        dispatch({type: 'addResult', error});\n                    }\n                );\n        }\n    }, []);\n\n    if (state.errors.length > 0) {\n        return (\n            <div>\n                Error(s):\n                {state.errors.map(error => (\n                    <div>{error.message}</div>\n                ))}\n            </div>\n            \n        );\n    } else if (!state.isLoaded) {\n        return (\n            <div className=\"loading-container\">\n                <CircularProgress />\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <Paper className=\"person-header\">\n                    <IconButton \n                            aria-label=\"Return home\"\n                            component={Link} \n                            to=\"/\">\n                        <ArrowBack />\n                    </IconButton>\n                    <div className=\"profile-title\">\n                        {selectedPerson.name}\n                    </div>\n                </Paper>\n                <div className=\"person-details\">\n                    <div>Birth Year: {selectedPerson.birth_year}</div>\n                    <div>Eye Color: {selectedPerson.eye_color}</div>\n                    <div>Gender: {selectedPerson.gender}</div>\n                    <div>Hair Color: {selectedPerson.hair_color}</div>\n                    <div>Height: {selectedPerson.height}</div>\n                    <div>Mass: {selectedPerson.mass}</div>\n                    <div>Skin Color: {selectedPerson.skin_color}</div>\n                </div>\n                <ListFilms films={state.results} />\n            </div>\n        );\n    }\n}","/Users/danieldunbar/Documents/projects/swapi-viewer/src/person-profile/films/ListFilms.tsx",[],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/person-profile/films/FilmSummary.tsx",[],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/common/common_interfaces.tsx",[],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/list-people/ListPeople.tsx",[],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/list-people/person-summary/PersonSummary.tsx",[],["52","53"],"/Users/danieldunbar/Documents/projects/swapi-viewer/src/main/App.tsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":83,"column":8,"nodeType":"60","endLine":83,"endColumn":10,"suggestions":"61"},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedPerson.films'. Either include it or remove the dependency array.","ArrayExpression",["66"],["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [selectedPerson.films]",{"range":"69","text":"70"},[2673,2675],"[selectedPerson.films]"]